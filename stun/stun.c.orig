#include <arpa/inet.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <unistd.h>
#include "dns.h"
#include "http.h"
#include "log.h"
#include "stun.h"

#define STUN_PORT		3478
#define STUN_RETRANSMISSIONS	9

struct stun_response_code {
	int code;
	char *reason_phrase;
};

static struct stun_response_code response_codes[] = {
	{400, "Bad Request"},
	{401, "Unauthorized"},
	{420, "Unknown Attribute"},
	{430, "Stale Credentials"},
	{431, "Integrity Check Failed"},
	{432, "Missing Username"},
	{433, "Use TLS"},
	{500, "Server Error"},
	{600, "Global Failure"}
};

static struct timeval timeouts[] = {
	{ 0, 100000 },
	{ 0, 200000 },
	{ 0, 400000 },
	{ 0, 800000 },
	{ 1, 600000 },
	{ 1, 600000 },
	{ 1, 600000 },
	{ 1, 600000 },
	{ 1, 600000 }
};

static char *
stun_get_reason_phrase(int code)
{
	int i;

	for (i = 0; i < sizeof(response_codes); i++)
		if (code == response_codes[i].code)
			return response_codes[i].reason_phrase;
	return NULL;
}

static void
stun_gen_tid(u8_t *tid)
{
	int i;

	for (i = 0; i < 4; i++) {
		u32_t r;

		r = (u32_t) random();
		tid[i << 2] = r & 0xff;
		tid[(i << 2) + 1] = (r >> 8) & 0xff;
		tid[(i << 2) + 2] = (r >> 16) & 0xff;
		tid[(i << 2) + 3] = (r >> 24) & 0xff;
	}
}

static void
stun_gen_binding_request(u8_t *tid, u8_t *msg)
{
	stun_hdr_t hdr;

	hdr = (stun_hdr_t) msg;
	hdr->type = htons(STUN_TYPE_BINDING_REQUEST);
	memcpy(hdr->tid, tid, 16);
	hdr->length = 0;
}

u8_t *
stun_find_attr(u8_t *msg, int len, u16_t type)
{
	stun_attr_hdr_t hdr;
	u8_t *attr = msg + sizeof(struct stun_hdr);
	u16_t attr_type, attr_len;

	for (;len > 0;) {
		hdr = (stun_attr_hdr_t) attr;
		attr_type = ntohs(hdr->type);
		attr_len = ntohs(hdr->length);
		if (attr_type == type)
			return attr + sizeof(struct stun_attr_hdr);

		attr += sizeof(struct stun_attr_hdr) + attr_len;
		len -= sizeof(struct stun_attr_hdr) + attr_len;
	}
	return NULL;
}

static int
stun_parse_binding_response(u8_t *msg,
			    char *mapped_address, int *mapped_port,
			    char *changed_address, int *changed_port)
{
	stun_hdr_t hdr;
	stun_address_t addr;
	struct in_addr in;
	u8_t *attr;
	u16_t type;
	int len;

	hdr = (stun_hdr_t) msg;
	type = ntohs(hdr->type);
	len = ntohs(hdr->length);

	if (type != STUN_TYPE_BINDING_RESPONSE) {
		if (type == STUN_TYPE_BINDING_ERROR) {
			stun_error_code_t error_code;
			char *reason_phrase;
			int code;

			/* Find ERROR-CODE attribute */
			attr = stun_find_attr(
				msg, len, STUN_ATTR_ERROR_CODE);
			if (attr == NULL) {
				log_msg(LOG_WARNING,
					"Missing ERROR-CODE attribute");
				return (-1);
			}
			/* Parse ERROR_CODE attribute */
			error_code = (stun_error_code_t) attr;
			*((u32_t *) &error_code) =
				ntohl(*((u32_t *) &error_code));
			code = (error_code->code.error_class * 100) +
			       error_code->code.error_number;
			reason_phrase = stun_get_reason_phrase(code);
			if (reason_phrase == NULL)
				log_msg(LOG_WARNING,
					"Binding Error received %d",
					code);
			else
				log_msg(LOG_WARNING,
					"Binding Error received %d %s",
					code, reason_phrase);
			return (-1);
		}
		log_msg(LOG_WARNING, "Expected Binding Response (%04x)",
			type);
		return (-1);
	}
	/* Find MAPPED-ADDRESS attribute */
	attr = stun_find_attr(msg, len, STUN_ATTR_MAPPED_ADDRESS);
	if (attr == NULL) {
		log_msg(LOG_WARNING, "Missing MAPPED-ADDRESS attribute");
		return (-1);
	}
	log_msg(LOG_INFO, "Found MAPPED-ADDRESS attribute");

	addr = (stun_address_t) attr;
	if (addr->family != STUN_ADDRESS_FAMILY_IPV4) {
		log_msg(LOG_WARNING, "Expected IPv4 address family");
		return (-1);
	}
	in.s_addr = addr->address;
	strcpy(mapped_address, inet_ntoa(in));
	*mapped_port = ntohs(addr->port);

	log_msg(LOG_INFO, "Mapped IP address %s", mapped_address);
	log_msg(LOG_INFO, "Mapped port %u", *mapped_port);

	/* Find CHANGED-ADDRESS attribute */
	attr = stun_find_attr(msg, len, STUN_ATTR_CHANGED_ADDRESS);
	if (attr == NULL) {
		log_msg(LOG_WARNING, "Missing CHANGED-ADDRESS attribute");
		return (-1);
	}
	log_msg(LOG_INFO, "Found CHANGED-ADDRESS attribute");

	addr = (stun_address_t) attr;
	if (addr->family != STUN_ADDRESS_FAMILY_IPV4) {
		log_msg(LOG_WARNING, "Expected IPv4 address family");
		return (-1);
	}
	in.s_addr = addr->address;
	strcpy(changed_address, inet_ntoa(in));
	*changed_port = ntohs(addr->port);

	log_msg(LOG_INFO, "Changed IP address %s", changed_address);
	log_msg(LOG_INFO, "Changed port %u", *changed_port);

	return 0;
}

static int
stun_recv_msg(int fd, u8_t *msg, int msglen)
{
	struct sockaddr addr;
	int addrlen, rcvd;

	memset(msg, 0, msglen);
	memset(&addr, 0, sizeof(addr));
	addrlen = sizeof(addr);
	rcvd = recvfrom(fd, msg, msglen, 0, &addr,
			(socklen_t *) &addrlen);
	if (rcvd < 0) {
		log_msg(LOG_ERROR, "Socket recvfrom failed (%s)",
			strerror(errno));
		return (-1);
	}
	if (rcvd == 0) {
		log_msg(LOG_WARNING, "Empty response");
		return (-1);
	}
	return rcvd;
}

static void
stun_dump_incoming_msg(char *action, stun_hdr_t hdr)
{
	char s[256], tid[64];
	int i;

	memset(tid, 0, 64);
	for (i = 0; i < 16; i++)
		sprintf(tid + strlen(tid), "%02X", hdr->tid[i]);

	memset(s, 0, 256);
	sprintf(s, "%s STUN ", action);

	switch (ntohs(hdr->type)) {
	case STUN_TYPE_BINDING_REQUEST:
		sprintf(s + strlen(s), "Binding Request");
		break;

	case STUN_TYPE_BINDING_RESPONSE:
		sprintf(s + strlen(s), "Binding Response");
		break;

	case STUN_TYPE_BINDING_ERROR:
		sprintf(s + strlen(s), "Binding Error");
		break;

	case STUN_TYPE_SHARED_SECRET_REQUEST:
		sprintf(s + strlen(s), "Shared Secret Request");
		break;

	case STUN_TYPE_SHARED_SECRET_RESPONSE:
		sprintf(s + strlen(s), "Shared Secret Response");
		break;

	case STUN_TYPE_SHARED_SECRET_ERROR:
		sprintf(s + strlen(s), "Shared Secret Error");
		break;

	default:
		sprintf(s + strlen(s), "message");
	}
	sprintf(s + strlen(s), " tid [%s]", tid);
	log_msg(LOG_INFO, s);
}

static int
stun_wait_for_response(int fd, u8_t *tid, struct timeval *timeout,
		       u8_t *msg, int msglen)
{
	stun_hdr_t hdr;
	fd_set rfds;
	struct timeval now, end;
	struct timezone tz;
	int len, result;

	/* Wait for response with the specified transaction id */
	gettimeofday(&now, &tz);
	timeradd(&now, timeout, &end);
	for (;;) {
		FD_ZERO(&rfds);
		FD_SET(fd, &rfds);
		result = select(fd + 1, &rfds, NULL, NULL, timeout);
		if (result < 0) {
			log_msg(LOG_ERROR, "Socket select failed (%s)",
				strerror(errno));
			return (-1);
		}
		if (result == 0)
			/* Socket select timed out */
			return (-1);

		len = stun_recv_msg(fd, msg, msglen);
		if (len < 0) {
			log_msg(LOG_WARNING, "Receive response failed");
			return (-1);
		}
		hdr = (stun_hdr_t) msg;
		if (memcmp(hdr->tid, tid, 16) == 0)
			break;

		stun_dump_incoming_msg("Dropped", hdr);

		gettimeofday(&now, &tz);
		if (timercmp(&now, &end, >))
			/* Socket select timed out */
			return (-1);
		timersub(&end, &now, timeout);
	}
	stun_dump_incoming_msg("Received", hdr);
	return 0;
}

/*
 * This routine returns the value 1 if the message is sent and a matching
 * response is received.  The routine returns a 0 if the message is sent
 * successfully but no response is received.  The routine returns the value
 * (-1) if the message cannot be sent.
 */
static int
stun_send_msg(int fd, char *server, int port, u8_t *tid, u8_t *msg,
	      int msglen)
{
	struct in_addr in;
	struct sockaddr_in addr;
	stun_hdr_t hdr;
	int i, result, sent;

	inet_aton(server, &in);
	for (i = 0; i < STUN_RETRANSMISSIONS; i++) {
		/* Send message to STUN server */
		addr.sin_family = AF_INET;
		addr.sin_addr.s_addr = in.s_addr;
		addr.sin_port = htons(port);
		hdr = (stun_hdr_t) msg;
		sent = sendto(fd, msg,
			      sizeof(struct stun_hdr) + ntohs(hdr->length),
			      0, (struct sockaddr *) &addr, sizeof(addr));
		if (sent < 0) {
			log_msg(LOG_ERROR, "Socket send failed (%s)",
				strerror(errno));
			return (-1);
		}
		/* Wait for response */
		result = stun_wait_for_response(fd, tid, &(timeouts[i]),
						msg, msglen);
		if (result == 0)
			break;
	}
	if (i == STUN_RETRANSMISSIONS) {
		log_msg(LOG_WARNING, "No response from STUN server");
		return 0;
	}
	log_msg(LOG_INFO, "Response received from STUN server");
	return 1;
}

void
stun_init(sip_user_agent_t ua, char *visible_ipaddr)
{
	struct sockaddr_in addr;
	u8_t tid[16], msg[BUFSIZE];
	char server[BUFSIZE];
	char changed_address[BUFSIZE], mapped_address[BUFSIZE];
	char *ipaddr;
	int changed_port, mapped_port;
	int fd, ipaddrlen, result;

	/* Check whether ua->stun_server_host is an IP address */
	result = find_ip_address(ua->stun_server_host, BUFSIZE,
				 &ipaddr, &ipaddrlen);
	if (result == 0) {
		memset(server, 0, BUFSIZE);
		strncpy(server, ipaddr, ipaddrlen);

	} else {
		char host[128];

		if (ua->flags & SUAF_NO_DNS)
			return;

		result = dns_gethostbyname(ua->stun_server_host, host, 128);
		if (result < 0)
			return;

		memset(server, 0, BUFSIZE);
		strcpy(server, host);
	}
	log_msg(LOG_INFO, "STUN server [%s]", ua->stun_server_host);
	log_msg(LOG_INFO, "STUN server IP address [%s]", server);

	/* Open UDP socket to STUN server */
	fd = socket(PF_INET, SOCK_DGRAM, 0);
	if (fd < 0) {
		log_msg(LOG_ERROR, "Create socket failed (%s)",
			strerror(errno));
		return;
	}
	result = fcntl(fd, F_SETFL, O_NONBLOCK);
	if (result < 0) {
		log_msg(LOG_ERROR, "Set socket to non-blocking failed (%s)",
			strerror(errno));
		close(fd);
		return;
	}
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = INADDR_ANY;
	addr.sin_port = htons(STUN_PORT);
	result = bind(fd, (struct sockaddr *) &addr, sizeof(addr));
	if (result < 0) {
		log_msg(LOG_ERROR, "Bind socket failed (%s)",
			strerror(errno));
		close(fd);
		return;
	}
	/* Generate Binding Request for Test I */
	memset(msg, 0, BUFSIZE);
	stun_gen_tid(tid);
	stun_gen_binding_request(tid, msg);

	/* Send Binding Request and wait for Binding Response */
	result = stun_send_msg(fd, server, STUN_PORT, tid, msg, BUFSIZE);
	if (result < 0) {
		log_msg(LOG_WARNING, "Send Binding Request failed");
		close(fd);
		return;
	}
	if (result == 0) {
		log_msg(LOG_INFO, "UDP Blocked");
		close(fd);
		return;
	}
	/* Parse Binding Response */
	memset(changed_address, 0, BUFSIZE);
	memset(mapped_address, 0, BUFSIZE);
	result = stun_parse_binding_response(msg,
					     mapped_address, &mapped_port,
					     changed_address, &changed_port);
	if (result < 0) {
		log_msg(LOG_WARNING, "Parse Binding Response failed");
		close(fd);
		return;
	}
	/* Record MAPPED_ADDRESS */
	if (strcmp(mapped_address, ua->local_uri.host) != 0)
		strcpy(visible_ipaddr, mapped_address);

	close(fd);
}
